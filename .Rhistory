oauth_endpoints("github")
myapp <- oauth_app("github",
key = "6af6542f966bc9a78dee",
secret = "da4bdffa8c22b183a3d5d2ff0a68f2deff57a96e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
con = content(req)
json2 = jsonlite::fromJSON(toJSON(con))
creations <- json2$created_at
tail(creations,1)
json2
colnames(json2)
json2$description
json2$description
json2$name
json2$created_at[8]
json2$created_at[json2$name == "datasharing"]
x <- data.frame("var1" = sample(1:5),"var2" = sample(6:10), "var3" = sample(11:15))
x <- X[sample(1,5),]; x$var2[c(1,3),] = NA
x <- x[sample(1,5),]; x$var2[c(1,3),] = NA
x <- x[sample(1:5),]; x$var2[c(1,3),] = NA
x <- x[sample(1:5),]; x$var2[c(1,3)] = NA
x
sample(1:5)
x[,1]
x[1:2,"var2"]
x[(x$var1 <= 3 & x$var3 > 11),]
x[x$var2 > 8,]
x[which(x$var2 > 8),]
sort(x$var2,na.last=TRUE)
x[order(x$var1),]
order(x$var1)
x$var1
x$var4 <- rnorm(5)
x
Y <- cbind(x,rpois(5))
Y <- cbind(x,rpois(5,5))
Y
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv)
restData <- read.csv("./data/restaurants.csv")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv")
restData <- read.csv("./data/restaurants.csv")
head(restData, n=3)
tail(restData)
summary(restData)
str(restData)
quantile(restData$councilDistrict,probs=c(0.1,0.4,0.7,0.9))
table(restData$zipCode, useNA = "ifany")
table(restData$councilDistrict, restData$zipCode)
all(restData$zipCode > 0)
colSums(is.na(restData))
all(colSums(is.na(restData)) == 0)
table(restData$zipCode %in% c("21212","21213"))
restData[(restData$zipCode %in% c("21212","21213"),]
restData[restData$zipCode %in% c("21212","21213"),]
data("UCBAdmissions")
DF = as.data.frame(UCBAdmissions)
summay(DF)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data = DF)
xt
xt <- xtabs(Freq ~ ., data = DF)
xt
ftable(xt)
print(object.size(xt))
print(object.size(xt),units = "Mb")
restData <- read.csv("restaurants.csv")
restData <- read.csv(".data/restaurants.csv")
restData <- read.csv("data/restaurants.csv")
x <- c(1,23,65,234,62343,124)
seq(along = x)
restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$zipGroups = cut(restData$zipCode, breaks = quantile(restData$zipCode))
table(restData$zipGroups)
head(restData)
install.packages("Hmisc")
install.packages("plyr")
library(Hmisc)
library(plyr)
restData2 = mutate(restData, zipGroups = cut2(zipCode, g= 4))
table(restData2$zipGroups)
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
head(mtcars)
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg","hp"))
head(carMelt, n = 3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spIns <- split(InsectSprays$count, InsectSprays$spray)
spIns
sapply(spIns, sum)
unlist(spIns)
ddply(InsectSprays, .(spray), summarize, sum = sum(count))
swirl()
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
?tbl_df
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, -r_arch:country)
select(cran, -(r_arch:country)
)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(1:size))
select(cran, -(X:size))
filter(cran, package = "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country = "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country %in% "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country = "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/ 2^20)
mutate(cran3, size_mb = size/ 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(.cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
options(editor = "internal")
swirl()
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- fulter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
options(editor = "internal")
swirl()
submit()
student3
students3
submit()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
?mutate
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
submit()
?group_by
submit()
swirl()
library(swirl)
?InstallCourses
getwd()
table <- read.csv("C:\Users\Jesus\Google Drive\Coursera\Data Science\Course 3 - Getting and Cleaning Data\3 - Text and date manipulation\getdata-data-ss06hid")
table <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\getdata-data-ss06hid")
table <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\getdata-data-ss06hid.csv")
agricultureLogical <- (table$ACR == 3 && table$AGS == 6)
which(agricultureLogical)
head(table)
table$AGS
agricultureLogical <- (table$ACR == 3 & table$AGS == 6)
which(agricultureLogical)
install.packages("jpeg")
library(jpeg)
?jpeg
data <- jpeg("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-jeff")
head(data)
data
data <- jpeg("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-jeff.jpeg")
head(data)
data <- jpeg("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-jeff.jpeg", native=TRUE)
?readJPEG
data <- readJPEG("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-jeff.jpeg", native=TRUE)
library(jpeg)
data <- readJPEG("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-jeff.jpeg", native=TRUE)
data
library(dplyr)
cur <- tbl_df(data)
quantile(data, probs = 0.99)
quantile(data, probs = c(0.3, 0.8))
?quantile
quantile(as.vector(data), probs = c(0.3, 0.8))
table(data)
data <- readJPEG("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-jeff.jpg", native=TRUE)
quantile(data, probs = c(0.3, 0.8))
data1 <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-EDSTATS_Country.csv")
data2 <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv")
library(dplyr)
statsC <- tbl_df(data1)
GDP <- tbl_df(data2)
GDP
statsC
GDP %>% rename(CountryCode = X)
GDP
GDP <- GDP %>% rename(CountryCode = X)
biggerDF <- full_join(statsC, GDP, by = "countryCode")
GDP <- tbl_df(data2)
biggerDF <- merge(statsC, GDP, by.x = "countryCode", by.y = "X", all = TRUE)
biggerDF <- merge(statsC, GDP, by.x = "CountryCode", by.y = "X", all = TRUE)
biggerDF
bifferDF[sort(biggerDF$GDP, decreasing = TRUE),]
biggerDF <- biggerDF[sort(biggerDF$GDP, decreasing = TRUE),]
biggerDF <- biggerDF[sort(biggerDF$GDP, decreasing = TRUE, na.last = TRUE),]
library(plyr)
biggerDF <- arrange(biggerDF, desc(GDP))
library(plyr)
library(dplyr)
biggerDF <- arrange(biggerDF, desc(GDP))
biggerDF
data1
biggerDF <- merge(data1, data2, by.x = "CountryCode", by.y = "X", all = TRUE)
biggerDF
biggerDF <- arrange(biggerDF, desc(GDP))
biggerDF
biggerDF <- merge(data1, data2, by.x = "CountryCode", by.y = "X", all = TRUE)
biggerDF <- merge(data1, data2, by.x = "CountryCode", by.y = "X")
biggerDF
data1
?merge
biggerDF <- merge(data1, data2, by.x = "CountryCode", by.y = "X", all = FALSE)
biggerDF
data1
data1$CountryCode
data2$X
biggerDF <- merge(data1, data2, by.x = "CountryCode", by.y = "X", all.x = TRUE)
biggerDF
biggerDF <- arrange(biggerDF, desc(GDP))
biggerDF$GDP
statss
GDP
?read.csv
statss <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-EDSTATS_Country.csv", skip = 5)
statss
head(statss)
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 5)
head(GDP)
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 4)
head(GDP)
rename(GDP, CountryCode = X, GDP = X.4)
size(GDP)
length(GDP)
dim(GDP)
tail(GDP)
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", header = FALSE)
tail(GDP)
GDP[1]
GDP <- GDP[!is.na(GDP[1]),]
GDP
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", header = FALSE)
GDP <- GDP[,!is.na(GDP[1])]
!is.na(GDP[1])
GDP[1]
GDP
countryStats <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-EDSTATS_Country.csv")
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", header = FALSE)
biggerDF <- merge(countryStats, GDP, by.x = "CountryCode", by.y = "X", all.x = TRUE)
GDP
biggerDF <- merge(countryStats, GDP, by.x = "CountryCode", by.y = "V1", all.x = TRUE)
biggerDF
?mrge
?merge
biggerDF <- merge(countryStats, GDP, by.x = "CountryCode", by.y = "V1")
biggerDF
head(biggerDF)
head(GDP)
biggerDF <- merge(countryStats, GDP, by.x = "CountryCode", by.y = "V1")
biggerDF <- arrange(biggerDF, desc(V4))
dim(biggerDF)
biggerDF <- merge(countryStats, GDP, by.x = "CountryCode", by.y = "V1", all = FALSE)
dim(biggerDF)
column.names(biggerDF)
?row.names
col.names(biggerDF)
colnames(biggerDF)
countryStats$CountryCode
GDP$V1
intersect(countryStats$CountryCode,GDP$V1)
?read.csv
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE)
GDP
head(GDP)
biggerDF[Ranking > 0, ]
biggerDF <- merge(countryStats, GDP, by.x = "CountryCode", by.y = "V1", all = FALSE)
biggerDF <- merge(countryStats, GDP, by.x = "CountryCode", by.y = "X", all = FALSE)
biggerDF[Ranking > 0, ]
colnames(biggerDF)
biggerDF <- merge(countryStats, GDP, by.x = "CountryCode", by.y = "X", all = FALSE)
biggerDF <- arrange(biggerDF[biggerDF$Ranking > 0, ], desc(US.dollars.))
class(biggerDF$Ranking)
biggerDF$Ranking
as.numeric(biggerDF$Ranking)
head(GDP)
library(dplyr)
GDP <- tbl_df(GDP)
GDP
GDP <- select(GDP, X, Ranking, US.dollars.)
GDP
GDP <- rename(GDP, CountryCode = X, GDP = US.dollars.)
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE)
GDP <- tbl_df(GDP)
GDP <- select(GDP, CountryCode = X, Ranking, GDP = US.dollars.)
GDP
as.character(GDP$Ranking)
grepl("[0-9]+",as.character(GDP$Ranking))
grepl("^[0-9]+$",as.character(GDP$Ranking))
filter(GDP, grepl("^[0-9]+$",as.character(GDP$Ranking)))
GDP <- filter(GDP, grepl("^[0-9]+$",as.character(GDP$Ranking)))
countryStats <- tbl_df(countryStats)
both <- inner_join(GDP, countryStats, by = "CountryCode")
countryStats
both
both <- arrange(both, desc(GDP))
both
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, dec = ",")
GDP <- tbl_df(GDP)
GDP
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE)
GDP
GDP <- tbl_df(GDP)
GDP
countryStats <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-EDSTATS_Country.csv", stringsAsFactors = FALSE)
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE)
GDP <- tbl_df(GDP)
GDP
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE, dec = ",")
GDP <- tbl_df(GDP)
GDP
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE, dec = ",", colClasses = c(char, numeric, lgl, chr, numeric))
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE, dec = ",", colClasses = c(chr, numeric, lgl, chr, numeric))
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE, dec = ",", colClasses = c("character", "integer", "logical", "character", "integer"))
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE, dec = "'")
GDP <- tbl_df(GDP)
GDP
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE, dec = "\"'")
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE, dec = "\'")
GDP <- tbl_df(GDP)
GDP
GDP$US.dollars.
as.numeric(GDP$US.dollars.)
GDP
GDP <- tbl_df(GDP)
GDP <- select(GDP, CountryCode = X, Ranking, GDP = US.dollars.)
GDP <- filter(GDP, grepl("^[0-9]+$",GDP$Ranking))  # get variables that have only numbers (ranking)
GDP
gsub(",","",GDP$GDP)
as.numeric(gsub(",","",GDP$GDP))
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE)
GDP <- tbl_df(GDP)
GDP <- select(GDP, CountryCode = X, Ranking, GDPchar = US.dollars.)
GDP
GDP <- filter(GDP, grepl("^[0-9]+$",GDP$Ranking))
GDP
GDP <- GDP %>% mutate(GDP = as.numeric(gsub(",","",GDP$GDPchar)) %>% select(-GDPchar)
)
GDP <- GDP %>% mutate(GDP = as.numeric(gsub(",","",GDP$GDPchar))) %>% select(-GDPchar)
GDP
countryStats <- tbl_df(countryStats)
countryStats
both <- inner_join(GDP, countryStats, by = "CountryCode")
both <- arrange(both, desc(GDP))
both
head(both,15)
both
both$Income.Group
incomeGroup <- group_by(both, Income.Group)
incomeGroup
GDP <- read.csv("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\3 - Text and date manipulation\\quiz\\getdata-data-GDP.csv", skip = 3, header = TRUE, stringsAsFactors = FALSE)
GDP <- tbl_df(GDP)
GDP <- select(GDP, CountryCode = X, RankingChar = Ranking, GDPchar = US.dollars.)
GDP <- filter(GDP, grepl("^[0-9]+$",GDP$Ranking))  # get variables that have only numbers (ranking)
GDP <- GDP %>% mutate(GDP = as.numeric(gsub(",","",GDP$GDPchar)), Ranking = as.numeric(RankingChar)) %>% select(-GDPchar, -RankingChar) #convert numbers to actual numbers
GDP
countryStats <- tbl_df(countryStats)
both <- inner_join(GDP, countryStats, by = "CountryCode")
incomeGroup <- group_by(both, Income.Group)
head(both,15)
incomeGroup <- group_by(both, Income.Group)
summarize(incomeGroup, mean(Ranking))
incomeGroup
?group_by
table(both$Income.Group)
?summarize
library(dplyr)
incomeGroup <- group_by(both, Income.Group)
summarize(incomeGroup, mean(Ranking)) #Q4
both %>% group_by(Income.Group) %>% summarize(mean = mean(Ranking))
both %>% group_by(Income.Group) %>% summarise(mean = mean(Ranking))
both %>% group_by(Income.Group)
both %>% group_by(Income.Group) %>% summarise_each(mean = mean(Ranking))
both %>% group_by(Income.Group) %>% summarise(mean = mean(Ranking))
setwd("C:\\Users\\Jesus\\Google Drive\\Coursera\\Data Science\\Course 3 - Getting and Cleaning Data\\Programming assignment")
library(plyr)
library(dplyr)
#read data knowing the names of the columns/features
trainX <- tbl_df(read.table("UCI HAR Dataset\\train\\X_train.txt"))#, col.names = featuresNames[,2]))
trainY <- tbl_df(read.table("UCI HAR Dataset\\train\\y_train.txt"))#, col.names = "activityID"))
trainS <- tbl_df(read.table("UCI HAR Dataset\\train\\subject_train.txt"))#, col.names = "subjectID"))
testX <- tbl_df(read.table("UCI HAR Dataset\\test\\X_test.txt"))#, col.names = featuresNames[,2]))
testY <- tbl_df(read.table("UCI HAR Dataset\\test\\y_test.txt"))#, col.names = "activityID"))
testS <- tbl_df(read.table("UCI HAR Dataset\\test\\subject_test.txt"))#, col.names = "subjectID"))
#join all information related with the train and the test set
trainSet <- bind_cols(testS, testY, testX)
testSet <- bind_cols(trainS, trainY, trainX)
#get measurement names
featuresNames <- read.table("UCI HAR Dataset\\features.txt")
names <- c("subjectID", "activityID", as.character(featuresNames[,2])) #4.
colnames(trainSet) <- names
colnames(testSet) <- names
#merge both sets
workingdf <- bind_rows(trainSet, testSet) #1.
workingdf %>% select(1, 2, matches(c("mean[(][)]|std[(][)]"),ignore.case = FALSE))
workingdf %>% select(1, 2, matches(c("(mean|std)[(][)]"),ignore.case = FALSE))
